name: Build, push & Deploy on GCP Compute Engine

on:
  push:
    branches:
      - production
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Even if you donâ€™t need to push updated code, you might still
      # need to check out the repository so that the Docker build has access to the Dockerfile, compose file, etc.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: Aventior-Inc/driver-new-tech
          ref: production

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true     

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1          

      - name: Create .env file for the Docker container & build image
        run: |
          pwd
          ls -al
          echo "HOST_NAME=${{ secrets.GCP_HOST_NAME }}" > .env
          echo "HOST_URL=${{ secrets.GCP_HOST_URL }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_PROD }}" >> .env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD_PROD }}" >> .env
          echo "WINDSHAFT_FILES=${{ secrets.WINDSHAFT_FILES_PROD }}" >> .env
          echo "TIMEZONE=${{ secrets.TIMEZONE_PROD }}" >> .env
          echo "PROTOCOL=${{ secrets.PROTOCOL_PROD }}" >> .env
          echo "CONTAINER_NAME=${{ secrets.CONTAINER_NAME_PROD }}" >> .env
          echo "STATIC_ROOT=${{ secrets.STATIC_ROOT_PROD }}" >> .env
          echo "DIST_ROOT=${{ secrets.DIST_ROOT_PROD }}" >> .env
          echo "DRIVER_REDIS_PORT=${{ secrets.DRIVER_REDIS_PORT_PROD }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DJANGO_IMAGE_TAG=driver-django-${{ github.run_number }}" >> .env
          echo "DATABASE_IMAGE_TAG=driver-database-${{ github.run_number }}" >> .env
          echo "ECR_REPO=${{ secrets.ECR_REPO }}" >> .env
          ls -al
          # Give execute permission to production_host.sh
          chmod +x pre-installation.sh
          ./pre-installation.sh
          chmod +x production_host.sh
          # Run the production_host.sh script
          ./production_host.sh
           # Build the Docker image
          docker compose -f docker-compose.yml build

      - name: Tag images
        run: |
          echo "=======  Configure Docker to use gcloud as a credential helper for GCR  ========"
          gcloud auth configure-docker
          echo "======  check images  ======="
          docker images
          echo "========  Export tags for use on the remote instance if needed  ========="
          echo "DJANGO_IMAGE_TAG=driver-django-${{ github.run_number }}" >> $GITHUB_ENV
          echo "DATABASE_IMAGE_TAG=driver-database-${{ github.run_number }}" >> $GITHUB_ENV
      - name: SSH into Compute Engine for deployment
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
      
      - name: Get public IP of GitHub Actions Runner
        id: get_ip
        run: |
          # Fetch the public IP address of the GitHub Actions runner using a public service
          IP_ADDRESS=$(curl -s https://ifconfig.me)
          echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV
          echo "GitHub Actions Runner IP: $IP_ADDRESS"

      - name: Whitelist GitHub Actions Runner IP in GCP Firewall
        run: |
          IP_ADDRESS="${{ env.IP_ADDRESS }}/32"
          RULE_NAME="allow-ssh-runner-${{ github.run_number }}"
          gcloud compute firewall-rules create $RULE_NAME \
            --network=default \
            --allow=tcp:22 \
            --source-ranges=${IP_ADDRESS} \
            --quiet
