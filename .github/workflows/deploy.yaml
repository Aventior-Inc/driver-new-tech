name: Deploy to EC2 and Push to ECR

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: Aventior-Inc/driver-new-tech
          ref: staging

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create .env file for the Docker container
        run: | 
          mkdir -p /home/ubuntu/driver-new-tech
          echo "HOST_NAME=${{ secrets.HOST_NAME }}" > /home/ubuntu/driver-new-tech/.env
          echo "HOST_URL=${{ secrets.HOST_URL }}" >> /home/ubuntu/driver-new-tech/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/ubuntu/driver-new-tech/.env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> /home/ubuntu/driver-new-tech/.env
          echo "WINDSHAFT_FILES=${{ secrets.WINDSHAFT_FILES }}" >> /home/ubuntu/driver-new-tech/.env
          echo "TIMEZONE=${{ secrets.TIMEZONE }}" >> /home/ubuntu/driver-new-tech/.env
          echo "PROTOCOL=${{ secrets.PROTOCOL }}" >> /home/ubuntu/driver-new-tech/.env
          echo "CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}" >> /home/ubuntu/driver-new-tech/.env
          echo "STATIC_ROOT=${{ secrets.STATIC_ROOT }}" >> /home/ubuntu/driver-new-tech/.env
          echo "DIST_ROOT=${{ secrets.DIST_ROOT }}" >> /home/ubuntu/driver-new-tech/.env
          echo "DRIVER_REDIS_PORT=${{ secrets.DRIVER_REDIS_PORT }}" >> /home/ubuntu/driver-new-tech/.env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> /home/ubuntu/driver-new-tech/.env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> /home/ubuntu/driver-new-tech/.env

      - name: Set execute permissions and run production_host.sh
        run: |
          # Give execute permission to production_host.sh
          chmod +x /home/ubuntu/driver-new-tech/production_host.sh
          
          # Run the production_host.sh script
          ./production_host.sh

      - name: Build Docker image and Push to ECR
        run: |
          # Log in to ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}
          
          # Build the Docker image
          docker-compose -f /home/ubuntu/driver-new-tech/docker-compose.yml build

          # Tag the image for ECR
          docker tag driver-tech:latest ${{ secrets.ECR_REPO }}:latest

          # Push the image to ECR
          docker push ${{ secrets.ECR_REPO }}:latest

      - name: SSH into EC2 and Deploy with Docker Compose
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        
      - name: Deploy on EC2 with Docker Compose
        run: |
          # SSH into EC2 and deploy using Docker Compose
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST_NAME }} << EOF
            # Change to project directory and pull the latest image from ECR
            cd /home/ubuntu/driver-new-tech
            
            # Ensure Docker Compose is available
            sudo apt-get install -y docker-compose

            # Pull the latest Docker image from ECR
            docker-compose pull

            # Start or restart the Docker containers using docker-compose
            docker-compose up -d --build

            # Clean up any stopped containers
            docker container prune -f
          EOF

      - name: Cleanup
        run: |
          # Clean up any sensitive data or files that were created
          rm -f private_key.pem
