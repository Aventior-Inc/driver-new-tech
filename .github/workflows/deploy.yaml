name: Deploy to EC2 and Push to ECR

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # - name: Create folder if it doesn't exist
      #   run: |
      #     mkdir -p /home/ubuntu/driver
          
      - uses: actions/checkout@v4
        with:
          repository: Aventior-Inc/driver-new-tech
          ref: staging

      - name: Get public IP of GitHub Actions Runner
        id: get_ip
        run: |
          # Fetch the public IP address of the GitHub Actions runner using a public service
          IP_ADDRESS=$(curl -s https://ifconfig.me)
          echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV
          echo "GitHub Actions Runner IP: $IP_ADDRESS"

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: whitelisting ip on security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $IP_ADDRESS
      
      - name: Create .env file
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.HOST_NAME }} << 'EOF'
          mkdir -p ~/driver
          cd ~/driver/driver-new-tech
          "echo HOST_NAME=${{ secrets.HOST_NAME }}" >> driver-new-tech/.env
          "echo HOST_URL=${{ secrets.HOST_URL }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo POSTGRES_USER: ${{ secrets.POSTGRES_USER }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo PGPASSWORD: ${{ secrets.PGPASSWORD }}" >> /home/ubuntu/driver/driver-new-tech/.env 
          "echo WINDSHAFT_FILES: ${{ secrets.WINDSHAFT_FILES }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo TIMEZONE: ${{ secrets.TIMEZONE }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo PROTOCOL: ${{ secrets.PROTOCOL }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo STATIC_ROOT: ${{ secrets.STATIC_ROOT }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo DIST_ROOT: ${{ secrets.DIST_ROOT }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo DRIVER_REDIS_PORT: ${{ secrets.DRIVER_REDIS_PORT }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}" >> /home/ubuntu/driver/driver-new-tech/.env
          "echo EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}" >> /home/ubuntu/driver/driver-new-tech/.env
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          # chmod 600 private_key.pem
          # ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.HOST_NAME }} << 'EOF'
          # cd ~/driver/driver-new-tech
          chmod +x production_host.sh
          ./production_host.sh
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
          docker build -t driver-tech .
          docker tag driver-tech:latest $ECR_REPO:latest
          docker push $ECR_REPO:latest
          sudo docker-compose up -d
          EOF
          
          rm -f private_key.pem

      - name: Cleanup
        run: rm -f private_key.pem
