name: Deploy to EC2 and Push to ECR

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Setup SSH and Run Commands on EC2
        env:
          HOST_NAME: ${{ secrets.HOST_NAME }}
          HOST_URL: ${{ secrets.HOST_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          WINDSHAFT_FILES: ${{ secrets.WINDSHAFT_FILES }}
          TIMEZONE: ${{ secrets.TIMEZONE }}
          PROTOCOL: ${{ secrets.PROTOCOL }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          STATIC_ROOT: ${{ secrets.STATIC_ROOT }}
          DIST_ROOT: ${{ secrets.DIST_ROOT }}
          DRIVER_REDIS_PORT: ${{ secrets.DRIVER_REDIS_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
          AWS_REGION: us-east-1
          ECR_REPO: 432351613919.dkr.ecr.us-east-1.amazonaws.com/driver-tech
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.HOST_NAME }} << 'EOF'
            cd ~/driver-new-tech
            chmod +x production_host.sh
            ./production_host.sh
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
            docker build -t driver-tech .
            docker tag driver-tech:latest $ECR_REPO:latest
            docker push $ECR_REPO:latest
            sudo docker-compose up -d
          EOF
          
          rm -f private_key.pem

      - name: Cleanup
        run: rm -f private_key.pem
